name: build deverser.py
on:
  push:
    paths:
    - '*.py'
    - '.github/workflows/*'
    - '*.toml'
    - '*.lock'
  workflow_dispatch:
  release:
    types:
    - created
    - published
    - released

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip-ci')"
    strategy:
      fail-fast: false
      matrix:
        os:
        - prettyname: windows
          fullname: windows-latest
        - prettyname: macos
          fullname: macos-latest
        - prettyname: linux
          fullname: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    runs-on: ${{ matrix.os.fullname }}
    steps:
    -
      name: Checkout
      uses: actions/checkout@v3
    - 
      name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - 
      name: Setup Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - 
      name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: virtualenv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - 
      name: Installing build dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install
    - 
      name: Installing UPX (macOS/Windows)
      if: matrix.os.prettyname != 'linux'
      run: |
        if ( "${{ matrix.os.prettyname }}" -eq "macos" ) {
          brew install upx
        }
        elseif ( "${{ matrix.os.prettyname }}" -eq "windows" ) {
          Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v3.96/upx-3.96-win64.zip" -OutFile upx.zip
          Expand-Archive -LiteralPath upx.zip -DestinationPath .
          Rename-Item upx-* upx
        }
    -
      name: Building independent executable
      env:
        pythonLocation: /Library/Frameworks/Python.framework/Versions/3.9/bin
      run: | 
        $PYINSTALLER_ARGS = new-object 'System.Collections.Generic.List[string]'
        $PYINSTALLER_ARGS.Add("--clean")
        if ( "${{ matrix.os.prettyname }}" -eq "macos" ) {
          $PYINSTALLER_ARGS.Add("--target-architecture")
          $PYINSTALLER_ARGS.Add("x86_64")
        }
        if ( "${{ matrix.os.prettyname }}" -eq "windows" ) {
          $PYINSTALLER_ARGS.Add("--upx-dir")
          $PYINSTALLER_ARGS.Add("upx/")
        }
        else {
          $PYINSTALLER_ARGS.Add("--strip")
        }
        $PYINSTALLER_ARGS.Add("-F")
        Write-Output "poetry run pyinstaller $PYINSTALLER_ARGS deverser.py pyimg4.py"
        poetry run pyinstaller $PYINSTALLER_ARGS deverser.py pyimg4.py
    - 
      name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deverser-${{ matrix.os.prettyname }}
        path: ./dist/*
  upload-prerelease:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' ||  github.ref == 'refs/heads/trunk' || github.event_name == 'release' # Only upload prereleases when it gets merged to main
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      -
        name: Get version information
        run: |
          pip install toml
          VERSION=$(python -c 'import toml; c = toml.load("pyproject.toml"); print(c["tool"]["poetry"]["version"])')
          if [ ! "${{ github.event_name }}" = "release" ]; then
            VERSION=$VERSION+git$(date +%Y%m%d).$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_ENV
      - 
        name: Creating release
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          version: ${{ env.version }}
        run: |
          assets=()
          for asset in ./artifacts/**/*; do
            if [ -d "$asset" ]; then continue; fi
            chmod +x $asset
            artifact_label=$(python -c "import os; print(os.path.basename(os.path.abspath(os.path.join('$asset', '..'))))")
            if [ "$artifact_label" = "deverser-windows" ]; then
              artifact_label=${artifact_label}_${version}.exe
            else
              artifact_label=${artifact_label}_${version}
            fi
            mv $asset $artifact_label
            assets+=("$artifact_label")
          done
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "gh release upload v$version ${assets[@]}"  
            gh release upload v$version "${assets[@]}"
          else  
            echo "gh release create -p v$version -t 'Prerelease v$version' -n '$(git log -1 --pretty=%B)' ${assets[@]}"
            gh release create -p v$version -t "Prerelease v$version" -n "$(git log -1 --pretty=%B)" "${assets[@]}"
          fi
